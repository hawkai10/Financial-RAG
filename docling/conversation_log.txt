---
Docling RAG System: User-Assistant Interaction Log
Date: [Insert current date]

1. Initial Setup & Goals
-----------------------
- User is building a robust RAG (Retrieval-Augmented Generation) system for business documents (PDFs, Excel, etc.) using Docling.
- Pipeline extracts, chunks, and contextualizes documents, saving results and metadata in contextualized_chunks.json.

2. Embedding & Indexing
-----------------------
- Embedding/indexing logic separated into embed_chunks_txtai.py.
- Chunks are sanitized, metadata is SQLite-compatible, and large fields are excluded from tags.
- Index is saved as business-docs-index using txtai with BAAI/bge-base-en-v1.5 model.
- Special character cleaning added to avoid database errors.

3. Backend & App
----------------
- Streamlit app (rag_app.py) for querying, with filters for document type and file.
- Backend (rag_backend.py) handles query correction, multi-query generation, hybrid retrieval (semantic + BM25), weighted scoring, metadata filtering, and answer synthesis using Gemini.
- Config file (config.py) and utils (utils.py) for logging, rate limiting, and validation.
- Gemini API key loaded from .env file.

4. Advanced RAG Features
------------------------
- Spell checking, query correction, multi-query retrieval, hybrid scoring, metadata/entity extraction, and document structure awareness implemented.
- Chain-of-Thought answer synthesis instructs Gemini to only return the final answer.
- Progress bar for chunk loading replaces verbose logs.

5. Gemini App (Frontend)
------------------------
- Preact/TypeScript app in docling/Gemini app with index.tsx, index.html, index.css, etc.
- UI: Search, document viewer, chat panel, recent queries.
- Uses mock data and keyword-matching for demo.
- Integration plan: Replace mock retrieval with real backend API calls (e.g., /api/search, /api/chat), move Gemini API calls to backend, ensure CORS, and update frontend to use fetch/axios.

6. Integration Guidance
-----------------------
- Frontend should not expose Gemini API key; backend handles all Gemini/model calls.
- Backend should return JSON with document, chunk, and answer for frontend display.
- User can choose to use Preact UI as main frontend or merge with Streamlit app.

[End of log. Update as new instructions or code changes occur.] 